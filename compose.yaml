# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    ports:
      - 8000:8000
    secrets:
      - tg-token
      - db-password
      - redis_ACL
    networks:                                                                                      
      - my_network
    environment:
      - TOKEN_FILE=/run/secrets/tg-token
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - REDIS_ACL_FILE=/run/secrets/redis_ACL

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:                                                                                      
      - my_network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    restart: always
    ports:
      - "6379:6379"
    networks:                                                                                      
      - my_network
    secrets:
      - redis_ACL
    volumes:
      - redis_data:/root/redis
      - redis.conf:/usr/local/etc/redis
    command:
      redis-server /usr/local/etc/redis/redis.conf
    # environment:
    #   - REDIS_PORT=6379
    #   - REDIS_DATABASES=16

volumes:
  db_data:
  redis.conf:
  redis_data:

secrets:
  # Tg-token, postrgesql password and users.acl has to be specified in listed files.
  tg-token:
    file: docker_secrets/token.txt
  db-password:
    file: docker_secrets/db_password.txt
  redis_ACL:
    file: docker_secrets/users.acl

networks:                                                                                          
  my_network:                                                                                      
    ~   

